@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center alert alert-dark">
    <h1 class="display-4">Leave Management System - SOLID and Clean Architecture</h1>
</div>
<div data-purpose="safely-set-inner-html:description:description">
    <p>
        <strong>Overview </strong>
    </p>
    <p>Creating a <strong>modular</strong>, <strong>testable </strong>and <strong>maintainable </strong>application in
        .<strong>NET Core</strong> requires a solid foundation. Setting up an application architecture requires
        foresight and much consideration as early decisions will impact how easily the application is extended and
        maintained. </p>
    <p>In the long run though, applications need to be maintained and in this case, extended. Between its design and the
        way the code was written, neither is really possible and so the application needs to be redesigned and future
        proofed. </p>
    <p><strong>Why SOLID&nbsp;Architecture?</strong></p>
    <p>When we talk about <strong>SOLID </strong>architecture, we are referring to isn’t a straightforward task.
        Decisions made early in the process can have a large impact later on, and maintainability and testability play
        an important role. Adopting these practices can also contribute to avoiding <strong>code smells</strong>,
        <strong>refactoring code</strong>, and <strong>agile development</strong>.</p>
    <p>SOLID stands for:</p>
    <ul>
        <li>
            <p><strong>S</strong> - Single-Responsibility Principle</p>
        </li>
        <li>
            <p><strong>O</strong> - Open-closed Principle</p>
        </li>
        <li>
            <p><strong>L</strong> - Liskov Substitution Principle</p>
        </li>
        <li>
            <p><strong>I</strong> - Interface Segregation Principle</p>
        </li>
        <li>
            <p><strong>D</strong> - Dependency Inversion Principle</p>
        </li>
    </ul>
    <p><strong>Application features: </strong></p>
    <ul>
        <li>
            <p><strong>Clean or Onion Architecture</strong> and <strong>Best Practices </strong></p>
        </li>
        <li>
            <p><strong>Command Query Responsibility Segregation (CQRS)</strong></p>
        </li>
        <li>
            <p><strong>Mediatr Pattern</strong></p>
        </li>
        <li>
            <p><strong>Email Service </strong>using <strong>SendGrid</strong></p>
        </li>
        <li>
            <p>Efficient <strong>Exception Handling and Routing </strong></p>
        </li>
        <li>
            <p><strong>Unit Testing</strong></p>
        </li>
        <li>
            <p><strong>Moq </strong>and <strong>Shouldy</strong></p>
        </li>
        <li>
            <p><strong>Global Error Handling</strong> with <strong>Custom Middleware and Exceptions</strong></p>
        </li>
        <li>
            <p><strong>Validation</strong> Using <strong>Fluent Validation</strong></p>
        </li>
        <li>
            <p><strong>.NET Core API and MVC </strong>UI Application</p>
        </li>
        <li>
            <p><strong>JWT(JSON Web Token)&nbsp; Authentication</strong></p>
        </li>
    </ul>
</div>